diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/boards.txt arduino-1.6.11/hardware/teensy/avr/boards.txt
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/boards.txt	2016-11-15 14:40:14.235880000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/boards.txt	2016-11-15 14:20:13.231614355 -0500
@@ -27,11 +27,13 @@
 teensy36.build.flags.c=
 teensy36.build.flags.S=-x assembler-with-cpp
 teensy36.build.flags.ld=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime={extra.time.local} "-T{build.core.path}/mk66fx1m0.ld"
-teensy36.build.flags.libs=-larm_cortexM4lf_math -lm
+teensy36.build.flags.libs=-larm_cortexM4lf_math -lm -lstdc++
 teensy36.serial.restart_cmd=false
 
 teensy36.menu.usb.serial=Serial
 teensy36.menu.usb.serial.build.usbtype=USB_SERIAL
+teensy36.menu.usb.cdceem=CDC-EEM
+teensy36.menu.usb.cdceem.build.usbtype=USB_CDC_EEM
 teensy36.menu.usb.keyboard=Keyboard
 teensy36.menu.usb.keyboard.build.usbtype=USB_KEYBOARDONLY
 teensy36.menu.usb.keyboard.fake_serial=teensy_gateway
@@ -383,10 +385,12 @@
 teensy31.build.flags.c=
 teensy31.build.flags.S=-x assembler-with-cpp
 teensy31.build.flags.ld=-Wl,--gc-sections,--relax,--defsym=__rtc_localtime={extra.time.local} "-T{build.core.path}/mk20dx256.ld"
-teensy31.build.flags.libs=-larm_cortexM4l_math -lm
+teensy31.build.flags.libs=-larm_cortexM4l_math -lm -lstdc++
 teensy31.serial.restart_cmd=false
 teensy31.menu.usb.serial=Serial
 teensy31.menu.usb.serial.build.usbtype=USB_SERIAL
+teensy31.menu.usb.cdceem=CDC-EEM
+teensy31.menu.usb.cdceem.build.usbtype=USB_CDC_EEM
 teensy31.menu.usb.keyboard=Keyboard
 teensy31.menu.usb.keyboard.build.usbtype=USB_KEYBOARDONLY
 teensy31.menu.usb.keyboard.fake_serial=teensy_gateway
diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_desc.c arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_desc.c
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_desc.c	2016-11-15 14:40:13.449264000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_desc.c	2016-11-06 02:46:38.575614276 -0500
@@ -396,7 +396,14 @@
 #define CDC_IAD_DESCRIPTOR_SIZE		0
 #endif
 
-#define CDC_DATA_INTERFACE_DESC_POS	CDC_IAD_DESCRIPTOR_POS+CDC_IAD_DESCRIPTOR_SIZE
+#define EEM_INTERFACE_DESC_POS		CDC_IAD_DESCRIPTOR_POS+CDC_IAD_DESCRIPTOR_SIZE
+#ifdef	EEM_INTERFACE
+#define EEM_INTERFACE_DESC_SIZE		9+7+7
+#else
+#define EEM_INTERFACE_DESC_SIZE		0
+#endif
+
+#define CDC_DATA_INTERFACE_DESC_POS	EEM_INTERFACE_DESC_POS+EEM_INTERFACE_DESC_SIZE
 #ifdef  CDC_DATA_INTERFACE
 #define CDC_DATA_INTERFACE_DESC_SIZE	9+5+5+4+5+7+9+7+7
 #else
@@ -522,6 +529,35 @@
         4,                                      // iFunction
 #endif
 
+#ifdef EEM_INTERFACE
+	9,
+	4,
+	EEM_INTERFACE,
+	0,
+	2,
+	0x02,
+	0x0C,
+	0x07,
+	0,
+	// RX Endpoint
+	7,
+	5,
+	EEM_RX_ENDPOINT,
+	0x02,
+	EEM_RX_SIZE, 0,
+	0,
+	// TX Endpoint
+	7,
+	5,
+	EEM_TX_ENDPOINT | 0x80,
+	0x02,
+	EEM_TX_SIZE, 0,
+	0,
+
+	
+#endif
+	
+
 #ifdef CDC_DATA_INTERFACE
         // interface descriptor, USB spec 9.6.5, page 267-269, Table 9-12
         9,                                      // bLength
diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_desc.h arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_desc.h
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_desc.h	2016-11-15 14:40:13.435932000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_desc.h	2016-11-15 15:49:49.976381110 -0500
@@ -688,6 +688,41 @@
   #define ENDPOINT14_CONFIG	ENDPOINT_TRANSMIT_ISOCHRONOUS
   #define ENDPOINT15_CONFIG	ENDPOINT_TRANSIMIT_ONLY
 
+#elif defined(USB_CDC_EEM)
+  #define VENDOR_ID		0x16C0
+  #define PRODUCT_ID		0x0483
+  #define DEVICE_CLASS		0x02	// 2 = Communication Class
+  #define DEVICE_SUBCLASS	0x0C
+  #define DEVICE_PROTOCOL	0x07
+  #define MANUFACTURER_NAME	{'T','e','e','n','s','y','d','u','i','n','o'}
+  #define MANUFACTURER_NAME_LEN	11
+  #define PRODUCT_NAME		{'U','S','B',' ','C','D','C','-','E','E','M'}
+  #define PRODUCT_NAME_LEN	11
+  #define EP0_SIZE		64
+  #define NUM_ENDPOINTS		6
+  #define NUM_USB_BUFFERS	12
+  #define NUM_INTERFACE		3
+  #define EEM_INTERFACE		0
+  #define EEM_TX_ENDPOINT	3
+  #define EEM_TX_SIZE		64
+  #define EEM_RX_ENDPOINT	4
+  #define EEM_RX_SIZE		64
+  #define CDC_IAD_DESCRIPTOR	1
+  #define CDC_STATUS_INTERFACE	1
+  #define CDC_DATA_INTERFACE	2	// Serial
+  #define CDC_ACM_ENDPOINT	5
+  #define CDC_RX_ENDPOINT       2
+  #define CDC_TX_ENDPOINT       1
+  #define CDC_ACM_SIZE          16
+  #define CDC_RX_SIZE           64
+  #define CDC_TX_SIZE           64
+  #define ENDPOINT1_CONFIG	ENDPOINT_TRANSIMIT_ONLY
+  #define ENDPOINT2_CONFIG	ENDPOINT_RECEIVE_ONLY
+  #define ENDPOINT3_CONFIG	ENDPOINT_TRANSIMIT_ONLY
+  #define ENDPOINT4_CONFIG	ENDPOINT_RECEIVE_ONLY
+  #define ENDPOINT5_CONFIG	ENDPOINT_TRANSIMIT_ONLY
+	
+
 #endif
 
 #ifdef USB_DESC_LIST_DEFINE
diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_eem.c arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_eem.c
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_eem.c	1969-12-31 19:00:00.000000000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_eem.c	2016-11-13 14:18:31.445020669 -0500
@@ -0,0 +1,259 @@
+#include "usb_dev.h"
+#include "usb_eem.h"
+#include "core_pins.h"
+#include <string.h>
+
+#if defined(EEM_INTERFACE)
+
+static usb_packet_t *rx_eem_packet=NULL;
+static usb_packet_t *tx_eem_packet=NULL;
+static volatile uint8_t eem_tx_noautoflush = 0;
+volatile uint8_t usb_eem_transmit_flush_timer=0;
+
+#define EEM_TRANSMIT_FLUSH_TIMEOUT	5 
+
+int usb_eem_getchar(void){
+	unsigned int i;
+	int c;
+	
+	if(!rx_eem_packet) {
+		if(!usb_configuration) return -1;
+		rx_eem_packet = usb_rx(EEM_RX_ENDPOINT);
+		if(!rx_eem_packet) return -1;
+	}
+	i = rx_eem_packet->index;
+	c = rx_eem_packet->buf[i++];
+	if(i >= rx_eem_packet->len){
+		usb_free(rx_eem_packet);
+		rx_eem_packet = NULL;
+	}else{
+		rx_eem_packet->index = i;
+	}
+	return c;
+}
+
+int usb_eem_peekchar(void){
+	if(!rx_eem_packet){
+		if(!usb_configuration) return -1;
+		rx_eem_packet = usb_rx(EEM_RX_ENDPOINT);
+		if(!rx_eem_packet) return -1;
+	}
+	if(!rx_eem_packet) return -1;
+	return rx_eem_packet->buf[rx_eem_packet->index];
+}
+
+// number of bytes available in the receive buffer
+int usb_eem_available(void)
+{
+	int count;
+	count = usb_rx_byte_count(EEM_RX_ENDPOINT);
+	if (rx_eem_packet) count += rx_eem_packet->len - rx_eem_packet->index;
+	return count;
+}
+
+// read a block of bytes to a buffer
+int usb_eem_read(void *buffer, uint32_t size)
+{
+	uint8_t *p = (uint8_t *)buffer;
+	uint32_t qty, count=0;
+
+	while (size) {
+		if (!usb_configuration) break;
+		if (!rx_eem_packet) {
+			rx:
+			rx_eem_packet = usb_rx(EEM_RX_ENDPOINT);
+			if (!rx_eem_packet) break;
+			if (rx_eem_packet->len == 0) {
+				usb_free(rx_eem_packet);
+				goto rx;
+			}
+		}
+		qty = rx_eem_packet->len - rx_eem_packet->index;
+		if (qty > size) qty = size;
+		memcpy(p, rx_eem_packet->buf + rx_eem_packet->index, qty);
+		p += qty;
+		count += qty;
+		size -= qty;
+		rx_eem_packet->index += qty;
+		if (rx_eem_packet->index >= rx_eem_packet->len) {
+			usb_free(rx_eem_packet);
+			rx_eem_packet = NULL;
+		}
+	}
+	return count;
+}
+
+void usb_eem_flush_input(void)
+{
+	usb_packet_t *rx;
+
+	if (!usb_configuration) return;
+	if (rx_eem_packet) {
+		usb_free(rx_eem_packet);
+		rx_eem_packet = NULL;
+	}
+	while (1) {
+		rx = usb_rx(EEM_RX_ENDPOINT);
+		if (!rx) break;
+		usb_free(rx);
+	}
+}
+
+// Maximum number of transmit packets to queue so we don't starve other endpoints for memory
+#define EEM_TX_PACKET_LIMIT 8
+
+// When the PC isn't listening, how long do we wait before discarding data?  If this is
+// too short, we risk losing data during the stalls that are common with ordinary desktop
+// software.  If it's too long, we stall the user's program when no software is running.
+#define EEM_TX_TIMEOUT_MSEC 70
+
+#if F_CPU == 240000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 1600)
+#elif F_CPU == 216000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 1440)
+#elif F_CPU == 192000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 1280)
+#elif F_CPU == 180000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 1200)
+#elif F_CPU == 168000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 1100)
+#elif F_CPU == 144000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 932)
+#elif F_CPU == 120000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 764)
+#elif F_CPU == 96000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 596)
+#elif F_CPU == 72000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 512)
+#elif F_CPU == 48000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 428)
+#elif F_CPU == 24000000
+  #define EEM_TX_TIMEOUT (EEM_TX_TIMEOUT_MSEC * 262)
+#endif
+
+// When we've suffered the transmit timeout, don't wait again until the computer
+// begins accepting data.  If no software is running to receive, we'll just discard
+// data as rapidly as Serial.print() can generate it, until there's something to
+// actually receive it.
+static uint8_t eem_transmit_previous_timeout=0;
+
+
+// transmit a character.  0 returned on success, -1 on error
+int usb_eem_putchar(uint8_t c)
+{
+	return usb_eem_write(&c, 1);
+}
+
+
+int usb_eem_write(const void *buffer, uint32_t size)
+{
+	uint32_t len;
+	uint32_t wait_count;
+	const uint8_t *src = (const uint8_t *)buffer;
+	uint8_t *dest;
+
+	eem_tx_noautoflush = 1;
+	while (size > 0) {
+		if (!tx_eem_packet) {
+			wait_count = 0;
+			while (1) {
+				if (!usb_configuration) {
+					eem_tx_noautoflush = 0;
+					return -1;
+				}
+				if (usb_tx_packet_count(EEM_TX_ENDPOINT) < EEM_TX_PACKET_LIMIT) {
+					eem_tx_noautoflush = 1;
+					tx_eem_packet = usb_malloc();
+					if (tx_eem_packet) break;
+					eem_tx_noautoflush = 0;
+				}
+				if (++wait_count > EEM_TX_TIMEOUT || eem_transmit_previous_timeout) {
+					eem_transmit_previous_timeout = 1;
+					return -1;
+				}
+				yield();
+			}
+		}
+		eem_transmit_previous_timeout = 0;
+		len = EEM_TX_SIZE - tx_eem_packet->index;
+		if (len > size) len = size;
+		dest = tx_eem_packet->buf + tx_eem_packet->index;
+		tx_eem_packet->index += len;
+		size -= len;
+		while (len-- > 0) *dest++ = *src++;
+		if (tx_eem_packet->index >= EEM_TX_SIZE) {
+			tx_eem_packet->len = EEM_TX_SIZE;
+			usb_tx(EEM_TX_ENDPOINT, tx_eem_packet);
+			tx_eem_packet = NULL;
+		}
+		usb_eem_transmit_flush_timer = EEM_TRANSMIT_FLUSH_TIMEOUT;
+	}
+	eem_tx_noautoflush = 0;
+	return 0;
+}
+
+int usb_eem_write_buffer_free(void)
+{
+	uint32_t len;
+
+	eem_tx_noautoflush = 1;
+	if (!tx_eem_packet) {
+		if (!usb_configuration ||
+		  usb_tx_packet_count(EEM_TX_ENDPOINT) >= EEM_TX_PACKET_LIMIT ||
+		  (tx_eem_packet = usb_malloc()) == NULL) {
+			eem_tx_noautoflush = 0;
+			return 0;
+		}
+	}
+	len = EEM_TX_SIZE - tx_eem_packet->index;
+	// TODO: Perhaps we need "usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT"
+	// added here, so the SOF interrupt can't take away the available buffer
+	// space we just promised the user could write without blocking?
+	// But does this come with other performance downsides?  Could it lead to
+	// buffer data never actually transmitting in some usage cases?  More
+	// investigation is needed.
+	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
+	eem_tx_noautoflush = 0;
+	return len;
+}
+
+void usb_eem_flush_output(void)
+{
+	if (!usb_configuration) return;
+	eem_tx_noautoflush = 1;
+	if (tx_eem_packet) {
+		usb_eem_transmit_flush_timer = 0;
+		tx_eem_packet->len = tx_eem_packet->index;
+		usb_tx(EEM_TX_ENDPOINT, tx_eem_packet);
+		tx_eem_packet = NULL;
+	} else {
+		usb_packet_t *tx = usb_malloc();
+		if (tx) {
+			usb_eem_transmit_flush_timer = 0;
+			usb_tx(EEM_TX_ENDPOINT, tx);
+		} else {
+			usb_eem_transmit_flush_timer = 1;
+		}
+	}
+	eem_tx_noautoflush = 0;
+}
+
+void usb_eem_flush_callback(void)
+{
+	if (eem_tx_noautoflush) return;
+	if (tx_eem_packet) {
+		tx_eem_packet->len = tx_eem_packet->index;
+		usb_tx(EEM_TX_ENDPOINT, tx_eem_packet);
+		tx_eem_packet = NULL;
+	} else {
+		usb_packet_t *tx = usb_malloc();
+		if (tx) {
+			usb_tx(EEM_TX_ENDPOINT, tx);
+		} else {
+			usb_eem_transmit_flush_timer = 1;
+		}
+	}
+}
+
+#endif
+	
diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_eem.h arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_eem.h
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_eem.h	1969-12-31 19:00:00.000000000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_eem.h	2016-11-06 03:46:55.535085178 -0500
@@ -0,0 +1,61 @@
+#ifndef USBeem_h_
+#define USBeem_h_
+
+#include "usb_desc.h"
+
+#if defined(EEM_INTERFACE)
+
+#include <inttypes.h>
+
+// C Lang
+#ifdef __cplusplus
+extern "C" {
+#endif
+int usb_eem_available(void);
+int usb_eem_getchar(void);
+int usb_eem_peekchar(void);
+int usb_eem_read(void *buffer, uint32_t size);
+void usb_eem_flush_input(void);
+int usb_eem_putchar(uint8_t c);
+int usb_eem_write(const void *buffer, uint32_t size);
+int usb_eem_write_buffer_free(void);
+void usb_eem_flush_output(void);
+extern volatile uint8_t usb_eem_transmit_flush_timer;
+#ifdef __cplusplus
+}
+#endif
+
+
+#ifdef __cplusplus
+#include "Stream.h"
+class usb_eem_class : public Stream {
+public:
+	void begin(void) { }
+	void end(void) { }
+	virtual int available() { return usb_eem_available(); }
+	virtual int read() { return usb_eem_getchar(); }
+	virtual int peek() { return usb_eem_peekchar(); }
+	virtual void flush() { usb_eem_flush_output(); }
+	virtual void clear(void) { usb_eem_flush_input(); }
+	virtual size_t write(uint8_t c) { return usb_eem_putchar(c); }
+	virtual size_t write(const uint8_t *buffer, size_t size) { return usb_eem_write(buffer, size); }
+	size_t readBytes(char *buffer, size_t length){
+		size_t count=0;
+		unsigned long startMillis = millis();
+		do {
+			count += usb_eem_read(buffer + count, length - count);
+			if (count >= length) return count;
+		} while(millis() - startMillis < _timeout);
+		setReadError();
+		return count;
+	}
+
+};
+
+extern usb_eem_class EEM;
+
+#endif // __cplusplus
+
+
+#endif //EEM_INTERFACE defined
+#endif //USBeem_h_
diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_inst.cpp arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_inst.cpp
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/usb_inst.cpp	2016-11-15 14:40:13.442598000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/cores/teensy3/usb_inst.cpp	2016-11-06 05:47:04.025482658 -0500
@@ -68,6 +68,10 @@
 uint8_t usb_joystick_class::manual_mode = 0;
 #endif
 
+#ifdef EEM_INTERFACE
+usb_eem_class EEM;
+#endif
+
 #ifdef USB_DISABLED
 usb_serial_class Serial;
 #endif
diff -burN Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/WProgram.h arduino-1.6.11/hardware/teensy/avr/cores/teensy3/WProgram.h
--- Arduino-1.6.11-UnModified/hardware/teensy/avr/cores/teensy3/WProgram.h	2016-11-15 14:40:13.425932000 -0500
+++ arduino-1.6.11/hardware/teensy/avr/cores/teensy3/WProgram.h	2016-11-06 03:02:53.840366075 -0500
@@ -33,6 +33,7 @@
 #include "usb_audio.h"
 #include "usb_touch.h"
 #include "usb_undef.h" // do not allow usb_desc.h stuff to leak to user programs
+#include "usb_eem.h"
 
 #include "WCharacter.h"
 #include "WString.h"
